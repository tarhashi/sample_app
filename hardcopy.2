 35     end
 36     assert_equal 6, sum
 37   end
 38
 39   def test_each_can_use_curly_brace_blocks_too
 40     array = [1, 2, 3]
 41     sum = 0
 42     array.each { |item|
 43       sum += item
 44     }
 45     assert_equal 6, sum
 46   end
 47
 48   def test_break_works_with_each_style_iterations
 49     array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
 50     sum = 0
 51     array.each { |item|
 52       break if item > 3
 53       sum += item
 54     }
 55     assert_equal 6, sum
 56   end
 57
 58   def test_collect_transforms_elements_of_an_array
 59     array = [1, 2, 3]
 60     new_array = array.collect { |item| item + 10 }
 61     assert_equal [11, 12, 13], new_array
 62
 63     # NOTE: 'map' is another name for the 'collect' operation
 64     another_array = array.map { |item| item + 10 }
 65     assert_equal [11, 12, 13], another_array
 66   end
 67
 68   def test_select_selects_certain_items_from_an_array
 69     array = [1, 2, 3, 4, 5, 6]
 70
 71     even_numbers = array.select { |item| (item % 2) == 0 }
 72     assert_equal [2, 4, 6], even_numbers
 73
 74     # NOTE: 'find_all' is another name for the 'select' operation
 75     more_even_numbers = array.find_all { |item| (item % 2) == 0 }
 76     assert_equal [2, 4, 6], more_even_numbers
 77   end
 78
 79   def test_find_locates_the_first_element_matching_a_criteria
 80     array = ["Jim", "Bill", "Clarence", "Doug", "Eli"]
 81
 82     assert_equal "Clarence", array.find { |item| item.size > 4 }
 83   end
 84
 85   def test_inject_will_blow_your_mind
 86     result = [2, 3, 4].inject(0) { |sum, item| sum + item }
 87     assert_equal 9, result
 88
 89     result2 = [2, 3, 4].inject(1) { |sum, item| sum * item }
 90     assert_equal 10, result2
 91
"about_iteration.rb" 124L, 3312C øÿ¼ÿÿ
